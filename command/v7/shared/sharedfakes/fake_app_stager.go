// Code generated by counterfeiter. DO NOT EDIT.
package sharedfakes

import (
	"sync"

	"code.cloudfoundry.org/cli/actor/v7action"
	"code.cloudfoundry.org/cli/api/cloudcontroller/ccv3/constant"
	"code.cloudfoundry.org/cli/command/v7/shared"
)

type FakeAppStager struct {
	StageAndStartStub        func(v7action.Application, string, constant.DeploymentStrategy, bool) error
	stageAndStartMutex       sync.RWMutex
	stageAndStartArgsForCall []struct {
		arg1 v7action.Application
		arg2 string
		arg3 constant.DeploymentStrategy
		arg4 bool
	}
	stageAndStartReturns struct {
		result1 error
	}
	stageAndStartReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAppStager) StageAndStart(arg1 v7action.Application, arg2 string, arg3 constant.DeploymentStrategy, arg4 bool) error {
	fake.stageAndStartMutex.Lock()
	ret, specificReturn := fake.stageAndStartReturnsOnCall[len(fake.stageAndStartArgsForCall)]
	fake.stageAndStartArgsForCall = append(fake.stageAndStartArgsForCall, struct {
		arg1 v7action.Application
		arg2 string
		arg3 constant.DeploymentStrategy
		arg4 bool
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("StageAndStart", []interface{}{arg1, arg2, arg3, arg4})
	fake.stageAndStartMutex.Unlock()
	if fake.StageAndStartStub != nil {
		return fake.StageAndStartStub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.stageAndStartReturns
	return fakeReturns.result1
}

func (fake *FakeAppStager) StageAndStartCallCount() int {
	fake.stageAndStartMutex.RLock()
	defer fake.stageAndStartMutex.RUnlock()
	return len(fake.stageAndStartArgsForCall)
}

func (fake *FakeAppStager) StageAndStartCalls(stub func(v7action.Application, string, constant.DeploymentStrategy, bool) error) {
	fake.stageAndStartMutex.Lock()
	defer fake.stageAndStartMutex.Unlock()
	fake.StageAndStartStub = stub
}

func (fake *FakeAppStager) StageAndStartArgsForCall(i int) (v7action.Application, string, constant.DeploymentStrategy, bool) {
	fake.stageAndStartMutex.RLock()
	defer fake.stageAndStartMutex.RUnlock()
	argsForCall := fake.stageAndStartArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeAppStager) StageAndStartReturns(result1 error) {
	fake.stageAndStartMutex.Lock()
	defer fake.stageAndStartMutex.Unlock()
	fake.StageAndStartStub = nil
	fake.stageAndStartReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAppStager) StageAndStartReturnsOnCall(i int, result1 error) {
	fake.stageAndStartMutex.Lock()
	defer fake.stageAndStartMutex.Unlock()
	fake.StageAndStartStub = nil
	if fake.stageAndStartReturnsOnCall == nil {
		fake.stageAndStartReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.stageAndStartReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeAppStager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.stageAndStartMutex.RLock()
	defer fake.stageAndStartMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAppStager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ shared.AppStager = new(FakeAppStager)
